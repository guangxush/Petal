package offer;

/**
 * @author: guangxush
 * @create: 2019/09/09
 *
 * 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。
 * HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。
 * 然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌
 * 然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友,
 * 可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)
 *
 * 如果没有小朋友，请返回-1
 */
public class LastRemaining {
    public int LastRemaining_Solution(int n, int m) {
        if(n<=0||m<=0){
            return -1;
        }
        int last = 0;
        for(int i=2;i<=n; i++){
            last = (last+m)%i;
        }
        return last;
    }
}
/**
 * 把n个人的编号改为0~n-1，然后对删除的过程进行分析。
 * 第一个删除的数字是(m-1)%n，几位k，则剩余的编号为(0,1,...,k-1,k+1,...,n-1)，下次开始删除时，顺序为(k+1,...,n-1,0,1,...k-1)。
 * 用f(n,m)表示从(0~n-1)开始删除后的最终结果。
 * 用q(n-1,m)表示从(k+1,...,n-1,0,1,...k-1)开始删除后的最终结果。
 * 则f(n,m)=q(n-1,m)。
 *
 * 下面把(k+1,...,n-1,0,1,...k-1)转换为(0~n-2)的形式，即
 * k+1对应0
 * k+2对于1
 * ...
 * k-1对应n-2
 * 转化函数设为p(x)=(x-k-1)%n, p(x)的你函数为p^(x)=(x+k+1)%n。
 * 则f(n,m)=q(n-1,m)=p^(f(n-1,m))=(f(n-1,m)+k+1)%n，又因为k=(m-1)%n。
 * f(n,m)=(f(n-1,m)+m)%n;
 *
 * 最终的递推关系式为
 * f(1,m) = 0;                        (n=1)
 * f(n,m)=(f(n-1,m)+m)%n; （n>1）
 */
